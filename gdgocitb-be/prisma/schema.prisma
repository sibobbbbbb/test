generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                    Int                    @id @default(autoincrement())
  name                  String
  email                 String                 @unique
  access                UserAccess
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  certificatesEarned    Certificate[]
  eventAttendees        EventAttendee[]
  pathProgresses        PathProgress[]
  problemSetSubmissions ProblemSetSubmission[]

  @@map("users")
}

model Path {
  id             Int            @id @default(autoincrement())
  pathName       String
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  certificates   Certificate[]
  modules        Module[]
  pathProgresses PathProgress[]

  @@map("paths")
}

model Module {
  id               Int              @id @default(autoincrement())
  pathId           Int
  moduleName       String
  description      String?
  video            String?
  order            Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lectures         Lecture[]
  moduleProgresses ModuleProgress[]
  path             Path             @relation(fields: [pathId], references: [id], onDelete: Cascade)
  problemSets      ProblemSet[]

  @@map("modules")
}

model Lecture {
  id          Int         @id @default(autoincrement())
  moduleId    Int
  title       String
  notes       String?
  slides      String?
  sourceCode  String?
  order       Int         @default(0)
  accessLevel AccessLevel @default(Member)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lectures")
}

model ProblemSet {
  id              Int                    @id @default(autoincrement())
  moduleId        Int
  problemSetTitle String
  description     String?
  video           String?
  submissionType  SubmissionType
  accessLevel     AccessLevel            @default(Member)
  deadline        DateTime?
  maxGrade        Int                    @default(100)
  passingGrade    Int                    @default(60)
  isManualGrading Boolean                @default(false)
  order           Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  submissions     ProblemSetSubmission[]
  module          Module                 @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("problem_sets")
}

model ProblemSetSubmission {
  id            Int        @id @default(autoincrement())
  userId        Int
  problemSetId  Int
  submissionUrl String?
  grade         Int        @default(0)
  submittedAt   DateTime   @default(now())
  gradedAt      DateTime?
  problemSet    ProblemSet @relation(fields: [problemSetId], references: [id], onDelete: Cascade)
  user          Users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemSetId])
  @@map("problem_set_submissions")
}

model PathProgress {
  id               Int              @id @default(autoincrement())
  userId           Int
  pathId           Int
  moduleProgresses ModuleProgress[]
  path             Path             @relation(fields: [pathId], references: [id], onDelete: Cascade)
  user             Users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pathId])
  @@map("path_progresses")
}

model ModuleProgress {
  id             Int          @id @default(autoincrement())
  pathProgressId Int
  moduleId       Int
  completed      Boolean      @default(false)
  completedAt    DateTime?
  module         Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  pathProgress   PathProgress @relation(fields: [pathProgressId], references: [id], onDelete: Cascade)

  @@unique([pathProgressId, moduleId])
  @@map("module_progresses")
}

model Certificate {
  id              Int             @id @default(autoincrement())
  userId          Int
  pathId          Int
  certificateType CertificateType
  name            String
  issueDate       DateTime        @default(now())
  certificateUrl  String?
  certificateId   String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  path            Path            @relation(fields: [pathId], references: [id], onDelete: Cascade)
  user            Users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Event {
  id          Int              @id @default(autoincrement())
  title       String
  subtitle    String?
  category    EventCategory
  description String?
  location    String?
  date        DateTime
  timeStart   String
  timeEnd     String
  accessLevel EventAccessLevel @default(Member)
  capacity    Int?
  eventType   EventType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  attendees   EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id       Int     @id @default(autoincrement())
  userId   Int
  eventId  Int
  rsvp     Boolean @default(false)
  attended Boolean @default(false)
  event    Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_attendees")
}

enum UserAccess {
  Member
  Buddy
  CurriculumAdmin
  ProfessionalDevelopmentAdmin
  TechnicalAdmin
}

enum SubmissionType {
  File
  Link
  Image
  GOCI
}

enum AccessLevel {
  Member
  Buddy
}

enum CertificateType {
  Member
  Buddy
}

enum EventType {
  Professional
  Community
}

enum EventCategory {
  GoogleDeveloperGroups
  Scholarship
  Internship
  Exchange
}

enum EventAccessLevel {
  Member
  MemberAndBuddy
}
